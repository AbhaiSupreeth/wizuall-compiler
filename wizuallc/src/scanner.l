%{
#include <stdio.h>
#include <stdlib.h> // For atof()
#include <string.h> // For strdup()
#include "ast.h"    // Include AST definitions (though not strictly needed here)
#include "symtab.h" // Include Symbol Table definitions

// Include the header file generated by Bison. 
// It contains token definitions and the yylval union type.
#include "y.tab.h" 

// Declare yylineno for line number tracking
int yylineno = 1;
%}

/* Options */
%option nounput noinput

/* Regular Expression Definitions */
DIGIT    [0-9]
ID       [a-zA-Z_][a-zA-Z0-9_]*

%%

[ \t]+             { /* Ignore spaces and tabs */ }
\n+               { yylineno += yyleng; /* Update line number(s) */ }

"#".*             { /* Ignore comments starting with # (no newline consumed) */ }

"if"               { return IF; }
"else"             { return ELSE; }
"while"            { return WHILE; }

{DIGIT}+           { yylval.number_val = atof(yytext); return NUMBER; }
{DIGIT}+"."{DIGIT}*  { yylval.number_val = atof(yytext); return NUMBER; } 
"."{DIGIT}+       { yylval.number_val = atof(yytext); return NUMBER; }

{ID}               { /* Lookup/Insert symbol and store pointer in yylval */
                     // Check if it's a keyword first (handled above)
                     yylval.symbol_ptr = symbol_insert(yytext); 
                     return ID; 
                   }

/* Operators - Return the character itself */
"+"                { return '+'; }
"-"                { return '-'; }
"*"                { return '*' ; }
"/"                { return '/'; }
"="                { return '='; }

/* Delimiters - Return the character itself */
"("                { return '('; }
")"                { return ')'; }
"["                { return '['; }
"]"                { return ']'; }
","                { return ','; }
";"                { return ';'; }
"{"                { return '{'; } /* Example placeholder */
"}"                { return '}'; } /* Example placeholder */

/* Error handling */
.                  { fprintf(stderr, "Error line %d: Unexpected character '%s'\n", yylineno, yytext); /* Skip character or exit */ }

%%

// Add yywrap function implementation
int yywrap() {
    return 1; // Indicate that we are done scanning.
}

// Note: A main function is usually not needed here. 